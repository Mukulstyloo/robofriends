{"version":3,"sources":["components/Card.js","components/CardList.js","components/searchBox.js","components/scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","console","log","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4f7d4f4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id})=>{\r\n    return(\r\n        <div className='tc bg-light-green dib br pa3 ma2 grow bw2 shadow-5'>\r\n          <img alt='robots' src={`https://robohash.org/${id}200*200`}/>\r\n          <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\nconst cardComponent = robots.map((user,i) =>{\r\n    return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n})\r\n    return(\r\n        <div>\r\n          {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n    return(\r\n        <div className='pa2'>\r\n          <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots'\r\n          onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props)=>{\r\n    return(\r\n        <div style={{overflowY:'scroll', border:'1px solid black', height:'500px'}}>\r\n          {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n    \r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>That is not good</h1>\r\n        }\r\n         return(\r\n             this.props.children\r\n         )\r\n         \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/searchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport {setSearchField,requestRobots} from '../actions';\r\n\r\n\r\nconst mapStateToProps = state =>{\r\n  return{\r\n    searchField:state.searchRobots.searchField,\r\n    robots:state.requestRobots.robots,\r\n    isPending:state.requestRobots.isPending,\r\n    error:state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots:() => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component{\r\n  componentDidMount(){\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  \r\n  \r\n  render(){\r\n    const {searchField,onSearchChange,robots,isPending} = this.props;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending ?\r\n      <h1>Loading</h1>:\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>Robofriends</h1>\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots}/>\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n\r\n    \r\n    \r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nexport const setSearchField = (text) =>{\r\n    console.log(text)\r\n    return{\r\n        type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n    }\r\n    \r\n}\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n     .then(response=> response.json())\r\n     .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n     .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nimport {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField:''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch,action={}) =>{\r\n    console.log(action.type)\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending:false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\r\n    switch(action.type)\r\n    {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state, {robots:action.payload, isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state, {error:action.payload, isPending:false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {createLogger} from 'redux-logger';\nimport 'tachyons';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst logger = createLogger()\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}